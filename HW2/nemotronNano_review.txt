        response = openrouter.chat.completions.create(
            model="nvidia/nemotron-nano-9b-v2:free",
            messages=[
                {"role": "user", "content": prompt}
            ],
            max_tokens=1500,
            temperature=0.4
        )
### Краткое описание работы
Участие студента в лабораторной работе — реализация двух алгоритмов сортировки (быстрой и пирамидальной) с подсчётом сравнений и обменов, обновление меню для выбора методов и проверка корректности работы. Программа корректно обрабатывает ввод дробей, сортирует их по возрастанию значений и выводит статистику операций.

---

### Оценка по критериям

#### 1. **Качество кода и решения (6/10)**  
**Плюсы:**  
- Структура модульная: разделение на функции (ввод, вывод, сортировка).  
- Базовая читаемость кода, если игнорировать неочевидные моменты.  

**Минусы:**  
- **Утечки памяти**: В `QuickSort` и `Heapsort` динамически выделенные указатели `compare` и `exchange` не удаляются в конце функции. Это критично.  
- Неочевидные моменты в логике: в `HeapStruc` рекурсивный вызов без оптимизации хвоста.  
- Использование `system("cls")` — непереносимо, что может быть недопустимо в учебном задании.  
- Нет проверки на чистоту ввода (например, для дробей).  

---

#### 2. **Полнота и правильность реализации (8/10)**  
**Плюсы:**  
- Все требуемые методы реализованы: пузырьковая, методом选择, быстрая и пирамидальная сортировка.  
- Меню обновлено с добавлением пунктов 5 и 6.  
- Подсчёт сравнений и обменов реализован.  

**Минусы:**  
- В `QuickSort` опорный элемент всегда берётся последним, что ведёт к худшему случаю O(n²). Для улучшения можно добавить случайный выбор опорного элемента.  
- Логика рекурсии в `QuickSort` требует углубления (например, оптимизация хвостовой рекурсии).  
- Проверка на корректность ввода дробей (например, нулевого знаменателя) частично реализована, но её можно улучшить.  

---

#### 3. **Документация и комментарии (5/10)**  
**Плюсы:**  
- Код частично прокомментирован, но комментарии часто поверхностны (например, в `HeapStruc`).  

**Минусы:**  
- Нет описания входа/выхода для функций.  
- Не хватает комментариев в критических участках (например, в рекурсивных вызовах `QuickSort`).  
- В меню и функциях `Input_Str` комментарии отсутствуют.  

---

#### 4. **Оформление и структура работы (7/10)**  
**Плюсы:**  
-hilье меню структурирована, функции разобраны по целям.  
- Использование структуры `Drob` логично.  

**Минусы:**  
- Код слишком долtoinette: симуляция `system("cls")` и `system("pause")` ухудшает читаемость.  
- Нет разделения задач на модули (например, разные файлы для сортировок).  
- Нет обработки ошибок (например, при выделении памяти).  

---

#### 5. **Качество результатов и выводов (9/10)**  
**Плюсы:**  
- Программа корректно сортирует массивы.  
- Вывод статистики работает без ошибок (для тестовых данных).  

**Минусы:**  
- Не реализовано сохранение результатов в файл или графическое представление.  

---

### Сильные стороны  
- Реализация сложных алгоритмов (быстрая и пирамидальная сортировка).  
- Авton gratuitous подсчёт статистики операций.  
- Обновлённое меню с динамическим выбором методов.  

---

### Рекомендации для улучшения  
1. **Устранить утечки памяти**: Добавить `delete[]` после использования указателей `compare` и `exchange`.  
2. **Оптимизация быстрой сортировки**: Внедрить случайный выбор опорного элемента.  
3. **Улучшить документацию**: Добавить описание входа/выхода функций и подробные комментарии в критических участках.  
4. **Сократить код**: Убрать `system("cls")` и `system("pause")`, заменив их на `std::cin.ignore()` или конфигурацию терминала.  
5. **Добавить обработку ошибок**: Проверка на успешное выделение памяти (`new`).  

---

### Итоговая оценка: **35/50**  
Работа выполнена, но содержит критические ошибки (утечки памяти, неоптимизированные алгоритмы) и слабую документацию. Для получения высокой оценки важно устранить вышеуказанные недостатки.